worker_processes auto;

events {
    worker_connections 1024;
}

http {
    # upstream auth {
    #     server auth:8000;
    # }
    upstream user {
        server user:8000;
    }
    upstream chat {
        server chat:8000;
    }
    upstream game {
        server game:8000;
    }

    # 1) HTTPS 서버 블록 (443)
    server {
        listen 80;
        # TODO: server_name 변경 필요: 실제 도메인 (또는 IP/localhost)

        #TODO: 공통 CSP 설정

        location / {
            location /media/avatars/default.png {
                alias /media/avatars/default.png;
                try_files $uri $uri/ = 404;
            }
            location /media/avatars/ {
                proxy_pass http://user;
                proxy_set_header Host api-gateway;
                proxy_set_header X-Real-IP $remote_addr;
            }
            location /api/user/ {
                proxy_pass http://user;
				proxy_set_header Host api-gateway;
            	proxy_set_header X-Real-IP $remote_addr;
            }
            proxy_pass http://user;
            proxy_set_header Host api-gateway;
            proxy_set_header X-Real-IP $remote_addr;
        }
        location /media/avatars/default.png {
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With';
                add_header 'Access-Control-Allow-Credentials' 'true';
                return 204;
            }

			alias /var/www/media/avatars/default.png;

			add_header 'Access-Control-Allow-Origin' '*';

			try_files $uri $uri/ = 404;
        }
		location /media/avatars/ {
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With';
                add_header 'Access-Control-Allow-Credentials' 'true';
                return 204;
            }

			proxy_pass http://user;
			proxy_set_header Host api-gateway;
			proxy_set_header X-Real-IP $remote_addr;
        }

        # 인증이 필요한 모든 요청
        location / {
            # OPTIONS 요청 처리 (CORS Preflight)
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With';
                add_header 'Access-Control-Allow-Credentials' 'true';
                return 204;
            }
			location /ws/user/ {
                proxy_http_version 1.1;
				proxy_set_header Upgrade $http_upgrade;
				proxy_set_header Connection "upgrade";
				proxy_read_timeout 86400;

            # # JWT 검증을 위해 auth로 요청 전달
            # proxy_pass http://auth;
            # proxy_set_header Host api-gateway;
            # proxy_set_header X-Real-IP $remote_addr;

            # 검증 성공 시 적절한 서비스로 라우팅
            location /api/user/ {
				if ($request_method = 'OPTIONS') {
					add_header 'Access-Control-Allow-Origin' '*';
					add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
					add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With';
					add_header 'Access-Control-Allow-Credentials' 'true';
					return 204;
				}
                proxy_pass http://user;
				proxy_set_header Host api-gateway;
            	proxy_set_header X-Real-IP $remote_addr;
            }
			location /api/friend/ {
				if ($request_method = 'OPTIONS') {
					add_header 'Access-Control-Allow-Origin' '*';
					add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
					add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With';
					add_header 'Access-Control-Allow-Credentials' 'true';
					return 204;
				}
                proxy_pass http://user;
				proxy_set_header Host api-gateway;
            	proxy_set_header X-Real-IP $remote_addr;
            }
            location /api/chat/ {
				if ($request_method = 'OPTIONS') {
					add_header 'Access-Control-Allow-Origin' '*';
					add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
					add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With';
					add_header 'Access-Control-Allow-Credentials' 'true';
					return 204;
				}
                proxy_pass http://chat;
				proxy_set_header Host api-gateway;
            	proxy_set_header X-Real-IP $remote_addr;
            }
            location /api/reception/ {
				if ($request_method = 'OPTIONS') {
					add_header 'Access-Control-Allow-Origin' '*';
					add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
					add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With';
					add_header 'Access-Control-Allow-Credentials' 'true';
					return 204;
				}
                proxy_pass http://game;
				proxy_set_header Host api-gateway;
            	proxy_set_header X-Real-IP $remote_addr;
            }
			location /api/tournament/ {
				if ($request_method = 'OPTIONS') {
					add_header 'Access-Control-Allow-Origin' '*';
					add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
					add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With';
					add_header 'Access-Control-Allow-Credentials' 'true';
					return 204;
				}
                proxy_pass http://game;
				proxy_set_header Host api-gateway;
            	proxy_set_header X-Real-IP $remote_addr;
            }
			location /api/arena/ {
				if ($request_method = 'OPTIONS') {
					add_header 'Access-Control-Allow-Origin' '*';
					add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
					add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With';
					add_header 'Access-Control-Allow-Credentials' 'true';
					return 204;
				}
                proxy_pass http://game;
				proxy_set_header Host api-gateway;
            	proxy_set_header X-Real-IP $remote_addr;
            }
			# FIXME: notifications
			location /ws/notifications/ {
				if ($request_method = 'OPTIONS') {
					add_header 'Access-Control-Allow-Origin' '*';
					add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
					add_header 'Access-Control-Allow-Headers' 'Content-Type, X-Requested-With';
					add_header 'Access-Control-Allow-Credentials' 'true';
					return 204;
				}
                proxy_http_version 1.1;
				proxy_set_header Upgrade $http_upgrade;
				proxy_set_header Connection "upgrade";
				proxy_read_timeout 86400;

				# 쿼리스트링을 포함하여 전달
				proxy_pass http://user$request_uri;
				proxy_set_header Host api-gateway;
				proxy_set_header X-Real-IP $remote_addr;
            }
			location /ws/chat/ {
				if ($request_method = 'OPTIONS') {
					add_header 'Access-Control-Allow-Origin' '*';
					add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
					add_header 'Access-Control-Allow-Headers' 'Content-Type, X-Requested-With';
					add_header 'Access-Control-Allow-Credentials' 'true';
					return 204;
				}
                proxy_http_version 1.1;
				proxy_set_header Upgrade $http_upgrade;
				proxy_set_header Connection "upgrade";
				proxy_read_timeout 86400;

				# 쿼리스트링을 포함하여 전달
				proxy_pass http://chat$request_uri;
				proxy_set_header Host api-gateway;
				proxy_set_header X-Real-IP $remote_addr;
            }
			location /ws/reception/ {
				if ($request_method = 'OPTIONS') {
					add_header 'Access-Control-Allow-Origin' '*';
					add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
					add_header 'Access-Control-Allow-Headers' 'Content-Type, X-Requested-With';
					add_header 'Access-Control-Allow-Credentials' 'true';
					return 204;
				}
                proxy_http_version 1.1;
				proxy_set_header Upgrade $http_upgrade;
				proxy_set_header Connection "upgrade";
				proxy_read_timeout 86400;

				# 쿼리스트링을 포함하여 전달
				proxy_pass http://game$request_uri;
				proxy_set_header Host api-gateway;
				proxy_set_header X-Real-IP $remote_addr;
            }
			location /ws/arena/ {
				if ($request_method = 'OPTIONS') {
					add_header 'Access-Control-Allow-Origin' '*';
					add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
					add_header 'Access-Control-Allow-Headers' 'Content-Type, X-Requested-With';
					add_header 'Access-Control-Allow-Credentials' 'true';
					return 204;
				}
                proxy_http_version 1.1;
				proxy_set_header Upgrade $http_upgrade;
				proxy_set_header Connection "upgrade";
				proxy_read_timeout 86400;

				# 쿼리스트링을 포함하여 전달
				proxy_pass http://game$request_uri;
				proxy_set_header Host api-gateway;
				proxy_set_header X-Real-IP $remote_addr;
            }
			location /ws/tournament/ {
				if ($request_method = 'OPTIONS') {
					add_header 'Access-Control-Allow-Origin' '*';
					add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
					add_header 'Access-Control-Allow-Headers' 'Content-Type, X-Requested-With';
					add_header 'Access-Control-Allow-Credentials' 'true';
					return 204;
				}
                proxy_http_version 1.1;
				proxy_set_header Upgrade $http_upgrade;
				proxy_set_header Connection "upgrade";
				proxy_read_timeout 86400;

				# 쿼리스트링을 포함하여 전달
				proxy_pass http://game$request_uri;
				proxy_set_header Host api-gateway;
				proxy_set_header X-Real-IP $remote_addr;
            }
        }
    }

    # 2) HTTP -> HTTPS 리다이렉트
    server {
        listen 443 ssl;

        # SSL 인증서
        ssl_certificate /etc/nginx/ssl/selfsigned.crt;
        ssl_certificate_key /etc/nginx/ssl/selfsigned.key;
        ssl_protocols TLSv1.2 TLSv1.3;

        # TODO: server_name 설정
        return 301 http://$host$request_uri;
    }
}